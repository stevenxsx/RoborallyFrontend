{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shroom\\\\IdeaProjects\\\\RoborallyFrontend\\\\roborally_frontend\\\\src\\\\context\\\\GameContextProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport GameContext from \"./GameContext\";\nimport GameApi from \"../api/GameApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GameContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [games, setGames] = useState([]);\n  const [loaded, setLoaded] = useState(false); //The code below is executed when the provider is rendered (inside App.tsx)\n  //The code should fetch the data from the API instead of using a static assignment\n  //Define a useState variable, note that useState returns an array, containing that state itself aswell as\n  // a function to set a new state value, here we use array destructuring (the [..., ...] notation).\n  // we also declare that the state variable and setter should be of type /take type Player[]\n\n  const [players, setPlayers] = useState([]);\n  const playerCount = useMemo(() => players.length, [players]);\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [currentPlayer, setCurrentPlayer] = useState({\n    playerId: -1,\n    playerColor: \"red\",\n    boardId: -1,\n    playerName: \"\"\n  });\n  const [spaces, setSpaces] = useState([]);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [gameId, setGameId] = useState(0);\n  const [gameName, setGameName] = useState(\"hi\"); //Define a function used to set a player ona  specific space\n\n  const setPlayerOnSpace = useCallback(async space => {\n    // Check if game is started\n    let game = games.find(game => game.gameId === board.boardId);\n\n    if (game === null || game === void 0 ? void 0 : game.gameStarted) {\n      //Check if space already has a player standing on it\n      if (!space.playerId) {\n        await GameApi.moveCurrentPlayer(gameId, { ...space,\n          playerId: currentPlayer.playerId\n        }).then(() => {\n          let tempSpaces = [...spaces]; //Use spread operator to copy spaces array, needed for making immutable changes\n          //See https://bit.ly/2My8Bfz, until the section about Immutable.js\n\n          tempSpaces[space.x][space.y].playerId = currentPlayer.playerId; //Set the player on the new space they clicked on\n\n          if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) {\n            //If the player was standing on a space previously, remove them from that space\n            tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined;\n          }\n\n          setSpaces(tempSpaces);\n          let tempPlayers = [...players];\n          tempPlayers[currentPlayerIndex].x = space.x; //Update the players array to reflect the changes\n\n          tempPlayers[currentPlayerIndex].y = space.y; //Update the players array to reflect the changes\n\n          setPlayers(tempPlayers);\n          setCurrentPlayer({ ...currentPlayer,\n            x: space.x,\n            y: space.y\n          }); //Update current player\n        }).catch(() => {\n          console.error(\"Error while moving player\");\n        });\n      }\n    } else {}\n  }, [currentPlayer, currentPlayerIndex, gameId, players, spaces]);\n  const setCurrentPlayerInBackend = useCallback(async (boardId, playerId) => {\n    await GameApi.setCurrentPlayer(boardId, playerId);\n    console.log(\"Current player set.\");\n  }, []);\n  const switchToNextPlayer = useCallback(async () => {\n    await GameApi.switchPlayer(gameId).then(() => {\n      const newPlayerIndex = (currentPlayerIndex + 1) % playerCount;\n      console.log(\"old player index\", currentPlayerIndex, \"new player index\", newPlayerIndex);\n      setCurrentPlayer(players[newPlayerIndex]);\n      setCurrentPlayerIndex(newPlayerIndex);\n    }).catch(() => console.error(\"Error while switching player\"));\n  }, [currentPlayerIndex, gameId, playerCount, players]);\n  const board = useMemo(() => {\n    return {\n      spaceDtos: spaces,\n      playerDtos: players,\n      currentPlayerDto: currentPlayer,\n      currentPlayerIndex: currentPlayerIndex,\n      width: width,\n      height: height,\n      boardName: gameName,\n      boardId: gameId\n    };\n  }, [currentPlayer, currentPlayerIndex, gameId, gameName, height, players, spaces, width]);\n  const [userName, setUserName] = useState(\"None\");\n  const [userId, setUserId] = useState(-1);\n  const user = useMemo(() => {\n    return {\n      playerId: userId,\n      playerName: userName\n    };\n  }, [userId, userName]);\n  const validateUser = useCallback(async incName => {\n    GameApi.validateUser(incName).then(userDTO => {\n      if (userDTO.playerId != null) {\n        setUserName(incName);\n        setUserId(userDTO.playerId);\n      }\n    }).catch(() => {\n      console.error(\"Error while fetching user\");\n    });\n  }, []);\n  const changeUserID = useCallback(async incID => {\n    setUserId(incID);\n  }, []); // Copied from \"Live-møde_Uge 12_-20210503_131255-Meeting Recording.mp4\"\n\n  const selectGame = useCallback(async game => {\n    GameApi.getBoard(game.gameId).then(board => {\n      setSpaces(board.spaceDtos);\n      setPlayers(board.playerDtos);\n      setWidth(board.width);\n      setHeight(board.height);\n      setGameId(board.boardId);\n      setGameName(board.boardName);\n\n      if (board.currentPlayerDto) {\n        setCurrentPlayer(board.currentPlayerDto);\n        board.playerDtos.forEach((player, index) => {\n          var _board$currentPlayerD;\n\n          if (player.playerId === ((_board$currentPlayerD = board.currentPlayerDto) === null || _board$currentPlayerD === void 0 ? void 0 : _board$currentPlayerD.playerId)) {\n            setCurrentPlayerIndex(index);\n          }\n        });\n      }\n\n      setLoaded(true);\n    }).catch(() => {\n      console.error(\"Error while fetching board from backend\");\n    });\n  }, []);\n  const unselectGame = useCallback(async () => {\n    setGameId(-1);\n    setLoaded(false);\n  }, []); // Copied from \"Live-møde_Uge 13_-20210510_130431-Meeting Recording.mp4\"\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (loaded && gameId >= 0) {\n        GameApi.getBoard(gameId).then(board => {\n          if (gameId === board.boardId) {\n            setSpaces(board.spaceDtos);\n            setPlayers(board.playerDtos);\n            setWidth(board.width);\n            setHeight(board.height);\n            setGameId(board.boardId);\n            setGameName(board.boardName);\n\n            if (board.currentPlayerDto) {\n              setCurrentPlayer(board.currentPlayerDto);\n              board.playerDtos.forEach((player, index) => {\n                var _board$currentPlayerD2;\n\n                if (player.playerId === ((_board$currentPlayerD2 = board.currentPlayerDto) === null || _board$currentPlayerD2 === void 0 ? void 0 : _board$currentPlayerD2.playerId)) {\n                  setCurrentPlayerIndex(index);\n                }\n              });\n            }\n          }\n        }).catch(() => {\n          console.error(\"Board could not be loaded\");\n        });\n      } else {\n        GameApi.getGames().then(games => {\n          setGames(games);\n        }).catch(() => {\n          console.error(\"Games could not be loaded\");\n        });\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [loaded, gameId]);\n  const deleteGame = useCallback(async game => {\n    GameApi.deleteGame(game.gameId).then(() => {\n      console.log(\"Deleting game: \" + game.gameId);\n    }).catch(() => {\n      console.error(\"Error while deleting board from backend\");\n    });\n  }, []);\n  const startGame = useCallback(async game => {\n    if (!game.gameStarted) {\n      GameApi.startGame(game.gameId).then(() => {\n        game.gameStarted = true;\n        console.log(\"Starting game: \" + game.gameId);\n      }).catch(() => {\n        console.error(\"Error while starting game from backend\");\n        throw 'Error in backend';\n      });\n    } else {\n      console.log(\"Game already started: \" + game.gameId + \" id\");\n    }\n  }, []);\n  const endGame = useCallback(async game => {\n    if (game.gameStarted) {\n      GameApi.endGame(game.gameId).then(() => {\n        game.gameStarted = false;\n        console.log(\"Ending game: \" + game.gameId);\n      }).catch(() => {\n        console.error(\"Error while ending game from backend\");\n      });\n    } else {\n      console.log(\"Game already stopped: \" + game.gameId + \" id\");\n    }\n  }, []);\n  const createGame = useCallback(async gameName => {\n    GameApi.createGame(gameName).then(() => {}).catch(() => {\n      console.error(\"Error while creating game from backend\");\n    });\n  }, []);\n  const createPlayer = useCallback(async game => {\n    if (board.playerDtos.length < 6) {\n      GameApi.createPlayer(game.gameId).then(() => console.log(\"Player created\"));\n    } else {}\n  }, []);\n  const addUserToBackEnd = useCallback(async (gameId, usName) => {\n    GameApi.addUserToGame(gameId, usName).then(() => console.log(\"added user to game\"));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      games: games,\n      selectGame: selectGame,\n      unselectGame: unselectGame,\n      deleteGame: deleteGame,\n      startGame: startGame,\n      createGame: createGame,\n      endGame: endGame,\n      createPlayer: createPlayer,\n      loaded: loaded,\n      board: board,\n      setCurrentPlayerOnSpace: setPlayerOnSpace,\n      switchCurrentPlayer: switchToNextPlayer,\n      user: user,\n      validateUser: validateUser,\n      changeUserID: changeUserID,\n      setCurrentPlayerInBackend: setCurrentPlayerInBackend,\n      addUserToBackEnd: addUserToBackEnd\n    },\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GameContextProvider, \"hy2yNBb4RKw9Z45gf/flKNQgcc0=\");\n\n_c = GameContextProvider;\nexport default GameContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameContextProvider\");","map":{"version":3,"sources":["C:/Users/Shroom/IdeaProjects/RoborallyFrontend/roborally_frontend/src/context/GameContextProvider.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","GameContext","GameApi","GameContextProvider","children","games","setGames","loaded","setLoaded","players","setPlayers","playerCount","length","currentPlayerIndex","setCurrentPlayerIndex","currentPlayer","setCurrentPlayer","playerId","playerColor","boardId","playerName","spaces","setSpaces","width","setWidth","height","setHeight","gameId","setGameId","gameName","setGameName","setPlayerOnSpace","space","game","find","board","gameStarted","moveCurrentPlayer","then","tempSpaces","x","y","undefined","tempPlayers","catch","console","error","setCurrentPlayerInBackend","log","switchToNextPlayer","switchPlayer","newPlayerIndex","spaceDtos","playerDtos","currentPlayerDto","boardName","userName","setUserName","userId","setUserId","user","validateUser","incName","userDTO","changeUserID","incID","selectGame","getBoard","forEach","player","index","unselectGame","interval","setInterval","getGames","clearInterval","deleteGame","startGame","endGame","createGame","createPlayer","addUserToBackEnd","usName","addUserToGame","setCurrentPlayerOnSpace","switchCurrentPlayer"],"mappings":"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","sourcesContent":["import React, { ReactNode, useCallback, useEffect, useMemo, useState } from \"react\"\nimport GameContext from \"./GameContext\"\nimport { Player } from \"../types/Player\";\nimport { Board } from \"../types/Board\";\nimport { Space } from \"../types/Space\";\nimport { Game } from \"../types/Game\";\nimport GameApi from \"../api/GameApi\";\n\n\nimport {User} from \"../types/User\";\n\n\n\n\n\n\ntype GameContextProviderPropsType = {\n    children: ReactNode\n}\n\n\nconst GameContextProvider = ({ children }: GameContextProviderPropsType) => {\n    const [games, setGames] = useState<Game[]>([])\n\n    const [loaded, setLoaded] = useState<boolean>(false)\n\n\n\n    //The code below is executed when the provider is rendered (inside App.tsx)\n    //The code should fetch the data from the API instead of using a static assignment\n    //Define a useState variable, note that useState returns an array, containing that state itself aswell as\n    // a function to set a new state value, here we use array destructuring (the [..., ...] notation).\n    // we also declare that the state variable and setter should be of type /take type Player[]\n    const [players, setPlayers] = useState<Player[]>([])\n\n    const playerCount = useMemo(() => players.length, [players])\n\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0)\n    const [currentPlayer, setCurrentPlayer] = useState<Player>({ playerId: -1, playerColor: \"red\", boardId: -1, playerName: \"\" })\n    const [spaces, setSpaces] = useState<Space[][]>([])\n    const [width, setWidth] = useState<number>(0)\n    const [height, setHeight] = useState<number>(0)\n    const [gameId, setGameId] = useState<number>(0)\n    const [gameName, setGameName] = useState<string>(\"hi\")\n\n    //Define a function used to set a player ona  specific space\n    const setPlayerOnSpace = useCallback(async (space: Space) => {\n        // Check if game is started\n        let game = games.find(game => game.gameId === board.boardId);\n        if (game?.gameStarted) {\n            //Check if space already has a player standing on it\n            if (!space.playerId) {\n                await GameApi.moveCurrentPlayer(gameId, { ...space, playerId: currentPlayer.playerId }).then(() => {\n                    let tempSpaces = [...spaces] //Use spread operator to copy spaces array, needed for making immutable changes\n                    //See https://bit.ly/2My8Bfz, until the section about Immutable.js\n                    tempSpaces[space.x][space.y].playerId = currentPlayer.playerId //Set the player on the new space they clicked on\n\n                    if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) { //If the player was standing on a space previously, remove them from that space\n\n                        tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined\n                    }\n                    setSpaces(tempSpaces)\n                    let tempPlayers = [...players]\n                    tempPlayers[currentPlayerIndex].x = space.x; //Update the players array to reflect the changes\n                    tempPlayers[currentPlayerIndex].y = space.y; //Update the players array to reflect the changes\n                    setPlayers(tempPlayers)\n                    setCurrentPlayer({ ...currentPlayer, x: space.x, y: space.y }) //Update current player\n\n                }).catch(() => {\n                    console.error(\"Error while moving player\")\n                })\n\n            }\n        } else {\n\n        }\n\n\n\n    }, [currentPlayer, currentPlayerIndex, gameId, players, spaces])\n\n    const setCurrentPlayerInBackend = useCallback(async (boardId: number, playerId: number) => {\n        await GameApi.setCurrentPlayer(boardId, playerId)\n        console.log(\"Current player set.\")\n    },[])\n\n    const switchToNextPlayer = useCallback(async () => {\n        await GameApi.switchPlayer(gameId).then(() => {\n            const newPlayerIndex = (currentPlayerIndex + 1) % playerCount\n            console.log(\"old player index\", currentPlayerIndex, \"new player index\", newPlayerIndex)\n            setCurrentPlayer(players[newPlayerIndex])\n            setCurrentPlayerIndex(newPlayerIndex)\n        }).catch(() => console.error(\"Error while switching player\"))\n\n    }, [currentPlayerIndex, gameId, playerCount, players])\n\n    const board = useMemo<Board>(() => {\n        return ({\n            spaceDtos: spaces,\n            playerDtos: players,\n            currentPlayerDto: currentPlayer,\n            currentPlayerIndex: currentPlayerIndex,\n            width: width,\n            height: height,\n            boardName: gameName,\n            boardId: gameId\n        })\n    }, [currentPlayer, currentPlayerIndex, gameId, gameName, height, players, spaces, width])\n\n    const [userName, setUserName] = useState<string>(\"None\")\n    const [userId, setUserId] = useState<number>(-1)\n\n    const user = useMemo<User>(() =>{\n        return ({\n            playerId: userId,\n            playerName: userName\n        })\n    },[userId, userName])\n\n    const validateUser = useCallback(async (incName: string) => {\n        GameApi.validateUser(incName).then(userDTO => {\n            if(userDTO.playerId != null) {\n                setUserName(incName)\n                setUserId(userDTO.playerId)\n            }\n        }).catch(() => {\n            console.error(\"Error while fetching user\")\n        })},[])\n\n    const changeUserID = useCallback(async (incID: number) => {\n                setUserId(incID)\n        },[])\n\n    // Copied from \"Live-møde_Uge 12_-20210503_131255-Meeting Recording.mp4\"\n    const selectGame = useCallback(async (game: Game) => {\n        GameApi.getBoard(game.gameId).then(board => {\n            setSpaces(board.spaceDtos)\n            setPlayers(board.playerDtos)\n            setWidth(board.width)\n            setHeight(board.height)\n            setGameId(board.boardId)\n            setGameName(board.boardName)\n            if (board.currentPlayerDto) {\n                setCurrentPlayer(board.currentPlayerDto)\n                board.playerDtos.forEach((player, index) => {\n                    if (player.playerId === board.currentPlayerDto?.playerId) {\n                        setCurrentPlayerIndex(index)\n                    }\n                })\n\n            }\n\n            setLoaded(true)\n        }).catch(() => {\n            console.error(\"Error while fetching board from backend\")\n        })\n\n    }, [])\n\n    const unselectGame = useCallback(async () => {\n        setGameId(-1);\n        setLoaded(false);\n    }, [])\n\n    // Copied from \"Live-møde_Uge 13_-20210510_130431-Meeting Recording.mp4\"\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            if (loaded && gameId >= 0) {\n                GameApi.getBoard(gameId).then(board => {\n                    if (gameId === board.boardId) {\n                        setSpaces(board.spaceDtos)\n                        setPlayers(board.playerDtos)\n                        setWidth(board.width)\n                        setHeight(board.height)\n                        setGameId(board.boardId)\n                        setGameName(board.boardName)\n                        if (board.currentPlayerDto) {\n                            setCurrentPlayer(board.currentPlayerDto)\n                            board.playerDtos.forEach((player, index) => {\n                                if (player.playerId === board.currentPlayerDto?.playerId) {\n                                    setCurrentPlayerIndex(index)\n                                }\n                            })\n                        }\n                    }\n                }).catch(() => {\n                    console.error(\"Board could not be loaded\")\n                })\n            } else {\n                GameApi.getGames().then(games => {\n                    setGames(games)\n                }).catch(() => {\n                    console.error(\"Games could not be loaded\")\n                })\n\n            }\n\n        }, 1000)\n\n        return () => clearInterval(interval)\n    }, [loaded, gameId])\n\n\n\n    const deleteGame = useCallback(async (game: Game) => {\n        GameApi.deleteGame(game.gameId).then(() => {\n            console.log(\"Deleting game: \" + game.gameId)\n\n        }).catch(() => {\n            console.error(\"Error while deleting board from backend\")\n\n        })\n\n    }, [])\n\n\n    const startGame = useCallback(async (game: Game) => {\n            if (!game.gameStarted) {\n                GameApi.startGame(game.gameId).then(() => {\n                    game.gameStarted = true;\n                    console.log(\"Starting game: \" + game.gameId)\n\n                }).catch(() => {\n                    console.error(\"Error while starting game from backend\")\n\n                    throw 'Error in backend'\n                })\n            } else {\n                console.log(\"Game already started: \" + game.gameId + \" id\")\n\n\n            }\n\n    }, [])\n\n    const endGame = useCallback(async (game: Game) => {\n        if (game.gameStarted) {\n            GameApi.endGame(game.gameId).then(() => {\n                game.gameStarted = false;\n                console.log(\"Ending game: \" + game.gameId);\n\n            }).catch(() => {\n                console.error(\"Error while ending game from backend\")\n\n            })\n        } else {\n            console.log(\"Game already stopped: \" + game.gameId + \" id\")\n\n        }\n    }, [])\n\n\n\n    const createGame = useCallback(async (gameName: String) => {\n        GameApi.createGame(gameName).then(() => {\n\n        }).catch(() => {\n            console.error(\"Error while creating game from backend\")\n\n        })\n    }, [])\n\n\n    const createPlayer = useCallback(async (game: Game) => {\n            if (board.playerDtos.length < 6) {\n                GameApi.createPlayer(game.gameId).then(() =>\n                    console.log(\"Player created\")\n                )\n            } else {\n\n            }\n\n    }, [])\n\n    const addUserToBackEnd = useCallback(async (gameId: number, usName: string) => {\n        GameApi.addUserToGame(gameId, usName).then(() =>\n            console.log(\"added user to game\")\n        )\n    }, [])\n\n\n    return (\n        <GameContext.Provider\n            value={\n                {\n                    games: games,\n                    selectGame: selectGame,\n                    unselectGame: unselectGame,\n                    deleteGame: deleteGame,\n                    startGame: startGame,\n                    createGame: createGame,\n                    endGame: endGame,\n                    createPlayer: createPlayer,\n                    loaded: loaded,\n                    board: board,\n                    setCurrentPlayerOnSpace: setPlayerOnSpace,\n                    switchCurrentPlayer: switchToNextPlayer,\n                    user: user,\n                    validateUser: validateUser,\n                    changeUserID: changeUserID,\n                    setCurrentPlayerInBackend: setCurrentPlayerInBackend,\n                    addUserToBackEnd: addUserToBackEnd\n                }\n            }>\n            {children} {/*See: https://reactjs.org/docs/composition-vs-inheritance.html*/}\n        </GameContext.Provider>\n    )\n}\n\nexport default GameContextProvider"]},"metadata":{},"sourceType":"module"}