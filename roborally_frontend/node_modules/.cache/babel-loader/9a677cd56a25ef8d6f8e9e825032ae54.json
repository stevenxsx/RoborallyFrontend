{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shroom\\\\IdeaProjects\\\\RoborallyFrontend\\\\roborally_frontend\\\\src\\\\components\\\\BoardComponent.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { SpaceComponent } from \"./SpaceComponent\";\nimport styles from \"../styling/BoardComponent.module.scss\"; //Import css module\n\nimport GameContext from \"../context/GameContext\";\n/*\nIf the board component took any props/arguments they would be declared inside the type below\nsee the space component for an example.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BoardComponent = () => {\n  _s();\n\n  //{...} context is known as object destructuring\n  const {\n    board,\n    loaded\n  } = useContext(GameContext); //Hook form of Context.Consumer, used to access the context\n\n  return (\n    /*#__PURE__*/\n\n    /*Apply css on div below*/\n    _jsxDEV(\"div\", {\n      className: styles.container,\n      children: loaded ? board.spaceDtos.map((spaceArray, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: spaceArray.map((space, index) => /*#__PURE__*/_jsxDEV(SpaceComponent, {\n          space: space\n        }, \"space\" + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 62\n        }, this))\n      }, \"spaceArray\" + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(BoardComponent, \"rS3o55x08IHyaL224jaCSBrI830=\");\n\n_c = BoardComponent;\nexport default BoardComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"sources":["C:/Users/Shroom/IdeaProjects/RoborallyFrontend/roborally_frontend/src/components/BoardComponent.tsx"],"names":["React","useContext","SpaceComponent","styles","GameContext","BoardComponent","board","loaded","container","spaceDtos","map","spaceArray","index","space"],"mappings":";;;AAAA,OAAOA,KAAP,IAAkCC,UAAlC,QAAmD,OAAnD;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,uCAAnB,C,CAA2D;;AAC3D,OAAOC,WAAP,MAAwB,wBAAxB;AACA;AACA;AACA;AACA;;;;AAGA,MAAMC,cAAsD,GAAG,MAAM;AAAA;;AACjE;AACA,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAkBN,UAAU,CAACG,WAAD,CAAlC,CAFiE,CAEjB;;AAEhD;AAAA;;AACI;AACA;AAAK,MAAA,SAAS,EAAED,MAAM,CAACK,SAAvB;AAAA,gBAoBKD,MAAM,GAEHD,KAAK,CAACG,SAAN,CAAgBC,GAAhB,CAAoB,CAACC,UAAD,EAAaC,KAAb,kBAChB;AAAA,kBAEQD,UAAU,CAACD,GAAX,CAAe,CAACG,KAAD,EAAQD,KAAR,kBAAkB,QAAC,cAAD;AAAsC,UAAA,KAAK,EAAEC;AAA7C,WAAqB,UAAUD,KAA/B;AAAA;AAAA;AAAA;AAAA,gBAAjC;AAFR,SAAU,eAAeA,KAAzB;AAAA;AAAA;AAAA;AAAA,cADJ,CAFG,gBAUH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA9BR;AAAA;AAAA;AAAA;AAAA;AAFJ;AAqCH,CAzCD;;GAAMP,c;;KAAAA,c;AA2CN,eAAeA,cAAf","sourcesContent":["import React, {FunctionComponent, useContext} from 'react';\nimport {SpaceComponent} from \"./SpaceComponent\";\nimport styles from \"../styling/BoardComponent.module.scss\" //Import css module\nimport GameContext from \"../context/GameContext\";\n/*\nIf the board component took any props/arguments they would be declared inside the type below\nsee the space component for an example.\n */\n\ntype BoardComponentProps = {}\nconst BoardComponent: FunctionComponent<BoardComponentProps> = () => {\n    //{...} context is known as object destructuring\n    const {board, loaded} = useContext(GameContext) //Hook form of Context.Consumer, used to access the context\n\n    return (\n        /*Apply css on div below*/\n        <div className={styles.container}>\n            {/*\n                The {...} notation is JSX allowing us to blend HTML and JS/TS together\n                The first map call returns an array of \"divs\" which are rendered.\n                Keys helps react identify where a change has happend and thus which component to rerender upon changes\n                The last map returns an array of space components, note that a prop/argument is passed (\"space\")\n                The result of the code segment below will be something like:\n                    <div key=\"spaceArray0\">\n                        <SpaceComponent key=\"space0\" space={SOME_SPACE_OBJECT}/>\n                        ...\n                        <SpaceComponent key=\"space7\" space={SOME_SPACE_OBJECT}/>\n                    </div>\n                    ....\n                    <div key=\"spaceArray7\">\n                        <SpaceComponent key=\"space0\" space={SOME_SPACE_OBJECT}/>\n                        ...\n                        <SpaceComponent key=\"space7\" space={SOME_SPACE_OBJECT}/>\n                    </div>\n\n            */}\n            {loaded ? (\n\n                board.spaceDtos.map((spaceArray, index) =>\n                    <div key={\"spaceArray\" + index}>\n                        {\n                            spaceArray.map((space, index) => <SpaceComponent key={\"space\" + index} space={space}/>)\n                        }\n                    </div>\n                )\n\n            ) : <h1>loading...</h1>}\n\n\n        </div>\n    )\n}\n\nexport default BoardComponent\n\n\n"]},"metadata":{},"sourceType":"module"}