[{"C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\index.tsx":"1","C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\App.tsx":"3","C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\components\\BoardComponent.tsx":"4","C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\components\\GamesComponent.tsx":"5","C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\context\\GameContextProvider.tsx":"6","C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\context\\GameContext.ts":"7","C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\api\\GameApi.ts":"8","C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\components\\SpaceComponent.tsx":"9","C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\components\\GameComponent.tsx":"10"},{"size":514,"mtime":1623790254000,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1623790254000,"results":"13","hashOfConfig":"12"},{"size":734,"mtime":1623966272000,"results":"14","hashOfConfig":"12"},{"size":6766,"mtime":1624007356000,"results":"15","hashOfConfig":"12"},{"size":4461,"mtime":1623965784000,"results":"16","hashOfConfig":"12"},{"size":11113,"mtime":1624006320000,"results":"17","hashOfConfig":"12"},{"size":2005,"mtime":1624005960000,"results":"18","hashOfConfig":"12"},{"size":2781,"mtime":1624006620000,"results":"19","hashOfConfig":"12"},{"size":2393,"mtime":1623954692000,"results":"20","hashOfConfig":"12"},{"size":4086,"mtime":1624008909932,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mnmh2c",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\index.tsx",[],"C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\App.tsx",["47","48","49"],"import React, {useMemo, useState} from 'react';\nimport BoardComponent from \"./components/BoardComponent\";\nimport GamesComponent from \"./components/GamesComponent\";\nimport GameContextProvider from \"./context/GameContextProvider\";\nimport { ToastProvider } from 'react-toast-notifications';\n\n\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n            </header>\n            {/*Context provider component below makes sure the context is accessible in any children components*/}\n                <GameContextProvider>\n                    <GamesComponent />\n                    <BoardComponent />\n                </GameContextProvider>\n\n        </div>\n    );\n}\n\nexport default App;\n","C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\components\\BoardComponent.tsx",["50","51","52","53"],"import React, { FunctionComponent, useContext, useState } from \"react\";\nimport { SpaceComponent } from \"./SpaceComponent\";\nimport styles from \"../styling/BoardComponent.module.scss\" //Import css module\nimport GameContext from \"../context/GameContext\";\nimport { Typography, Button } from \"@material-ui/core\";\nimport { Game } from \"../types/Game\";\nimport { User } from \"../types/User\";\nimport {deepPurple, green, lightBlue, red, yellow} from '@material-ui/core/colors';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport PlayerIcon from \"@material-ui/icons/Person\";\n\n/*\nIf the board component took any props/arguments they would be declared inside the type below\nsee the space component for an example.\n */\n\n/**\n * @author s205444, Lucas\n */\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        },\n        purple: {\n            color: theme.palette.getContrastText(deepPurple[500]),\n            backgroundColor: deepPurple[500],\n        },\n        red: {\n            color: theme.palette.getContrastText(red[500]),\n            backgroundColor: red[500],\n        },\n        green: {\n            color: theme.palette.getContrastText(green[500]),\n            backgroundColor: green[500],\n        },\n        blue: {\n            color: theme.palette.getContrastText(lightBlue[500]),\n            backgroundColor: lightBlue[500],\n        },\n        yellow: {\n            color: theme.palette.getContrastText(yellow[500]),\n            backgroundColor: yellow[500],\n        }\n    }),\n);\n\ntype BoardComponentProps = {}\nconst BoardComponent: FunctionComponent<BoardComponentProps> = () => {\n    //{...} context is known as object destructuring\n    const { games, createPlayer, board, loaded, unselectGame, startGame, endGame } = useContext(GameContext) //Hook form of Context.Consumer, used to access the context\n\n    let [join, setJoin] = useState(false);\n    let [start, setStart] = useState(false);\n    // Major hack to find out which game is being used in this instance\n    let game = games.find(game => game.gameId === board.boardId);\n    if (game === undefined) {\n        var users: User[] = [];\n        game = {\n            gameName: \"null\",\n            gameId: 500,\n            gameStarted: false,\n            gameUsers: users\n        };\n    } else {\n        // Sets local var of game to actual status\n        start = game.gameStarted\n    }\n\n    const {user} = useContext(GameContext)\n\n    const {changeUserID} = useContext(GameContext)\n\n    const {addUserToBackEnd} = useContext(GameContext)\n\n\n    const classes = useStyles();\n\n    const onSetJoin = () => {\n        setJoin(true);\n        if(game !== undefined) {\n            addUserToBackEnd(game.gameId, user.playerName)\n        }\n    }\n\n    const onClickCreate = () => {\n        if (game !== undefined) {\n            createPlayer(game)\n        }\n    }\n\n    const onSetLeave = () => {\n        setJoin(false);\n    }\n    const onSetStart = () => {\n        if (game !== undefined) {\n            startGame(game).then(() =>\n                setStart(true)\n            ).catch(() =>\n                setStart(false)\n            );\n        }\n    }\n    const onSetEnd = () => {\n        let game: Game | undefined;\n        game = games.find(game => game.gameId === board.boardId);\n        if (game === undefined) {\n            console.log(\"Game could not be found in map\")\n        } else {\n            endGame(game);\n            setStart(false);\n        }\n    }\n\n    const onBack = () => {\n        setJoin(false);\n        unselectGame();\n    }\n\n\n    return (\n        loaded ?\n            <div className={styles.centerAll}>\n\n\n                <Typography variant=\"h5\" align=\"center\" >Game {game.gameName} </Typography>\n                {!start ?\n                    <Typography variant=\"h5\" align=\"center\" >Welcome to roborally</Typography>\n\n                    :\n                    <Typography variant=\"h5\" align=\"center\" >Game is on </Typography>\n                }\n                <Typography variant=\"h6\" align=\"left\" >Users in this game: </Typography>\n                {game.gameUsers.map((user, index) => <ListItem key={index}>\n\n\n                    <ListItemText\n                        primary={user.playerName}\n                    />\n                </ListItem>)}\n\n                <br />\n                <br />\n                <div className={styles.container}>\n                    {board.spaceDtos.map((spaceArray, index) =>\n                        <div key={\"spaceArray\" + index}>\n                            {\n                                spaceArray.map((space, index) => <SpaceComponent key={\"space\" + index} space={space} />)\n                            }\n                        </div>\n                    )\n                    }\n                </div>\n                <Typography variant=\"body1\">Current user: {user.playerName}</Typography>\n\n                    <Typography variant=\"subtitle1\">Choose a player</Typography>\n                    {board.playerDtos.map((user, index) => <button color={\"primary\"} key={index}\n                                                                 onClick={() => changeUserID(user.playerId)}> {user.playerColor}</button>)\n                    }\n\n\n\n\n                <br/>\n                {!join ?\n                    <button className={classes.blue}   color=\"primary\" onClick={onSetJoin}  >\n                        Join\n                    </button>\n\n                    :\n\n                    < button className={classes.red}  color=\"primary\" onClick={onSetLeave}  >\n                        Leave\n                    </button>\n                }\n\n                <button className={classes.blue} color=\"primary\" onClick={onClickCreate}>\n                    New player\n                </button>\n\n\n                <button className={classes.green} color=\"primary\" onClick={onSetStart}  >\n                    Start\n                </button>\n\n                <button className={classes.yellow} color=\"primary\" onClick={onSetEnd}  >\n                    End Game\n                </button>\n\n                <button className={classes.red} color=\"primary\" onClick={onBack}>\n                    Back to Games\n                </button>\n\n\n                <Typography variant=\"h5\">Game info</Typography>\n                <Typography variant=\"subtitle1\">{\"Board: \" + board.boardId}</Typography>\n\n\n\n\n            </div >\n            :\n            <div />\n    )\n}\n\nexport default BoardComponent\n\n\n","C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\components\\GamesComponent.tsx",["54"],"import React, {FunctionComponent, useContext, useMemo, useState} from 'react';\nimport GameContext from \"../context/GameContext\";\nimport { GameComponent } from \"./GameComponent\";\nimport styles from \"../styling/BoardComponent.module.scss\" //Import css module\nimport { Typography, Button, TextField } from \"@material-ui/core\";\n\n\n/**\n * @author s205444, Lucas\n */\n\n\ntype GamesComponentProps = {\n\n}\nconst GamesComponent: FunctionComponent<GamesComponentProps> = () => {\n\n    const { games, loaded } = useContext(GameContext)\n    const { createGame } = useContext(GameContext)\n    const {user} = useContext(GameContext)\n    const {validateUser} = useContext(GameContext)\n\n    const [inputName, setinputName] = useState('')\n\n    const [userInputName, setUserInputName] = useState('')\n\n\n\n\n\n\n\n    const handleClick = () => {\n        console.log(\"new game name: \" + inputName)\n        createGame(inputName)\n    };\n\n    const userClick = () => {\n        validateUser(userInputName)\n    }\n\n    return (\n        <div id=\"everything\">\n            {\n                !loaded ?\n                    <div>\n                        <div className={styles.centerHori}>\n                            <Typography variant=\"h4\">RoboRally Gruppe 07</Typography>\n                            <br />\n                            <div>\n                                <Typography variant=\"h6\">New game:</Typography>\n                                <form className={styles.centerButtons}>\n                                    <TextField\n                                        variant=\"outlined\"\n                                        margin=\"normal\"\n                                        required\n                                        name=\"inputName\"\n                                        label=\"Game name\"\n                                        type=\"inputName\"\n                                        id=\"inputName\"\n                                        autoComplete=\"current-inputName\"\n                                        value={inputName}\n                                        onChange={(event) => { setinputName(event.target.value) }} //whenever the text field change, you save the value in state\n                                    />\n                                    <button\n                                        onClick={handleClick}\n                                    >\n                                        New game\n                                    </button>\n                                </form>\n                            </div>\n                            <div>\n                                <form className={styles.centerButtons}>\n                                    <TextField\n                                        variant=\"outlined\"\n                                        margin=\"normal\"\n                                        name=\"inputUser\"\n                                        label=\"User name\"\n                                        type=\"inputUser\"\n                                        id=\"inputUser\"\n                                        autoComplete=\"current-inputUser\"\n                                        value={userInputName}\n                                        onChange={(event) => { setUserInputName(event.target.value) }} //whenever the text field change, you save the value in state\n                                    />\n                                    <Button\n                                        onClick={userClick}\n                                    >\n                                        Login\n                                    </Button>\n                                </form>\n                            </div>\n                            <Typography variant=\"body1\">Current user: {user.playerName}</Typography>\n                            <div>\n                            </div>\n                            <br />\n                            <br />\n\n                        </div>\n                        <Typography variant=\"h5\">Games</Typography>\n\n                        <div className={styles.container} >\n                            {games.map((game, index) =>\n                                <GameComponent key={\"game\" + index} game={game} />\n                            )\n                            }\n                        </div>\n\n                    </div >\n                    :\n                    <div />\n            }\n        </div >\n    )\n}\n\nexport default GamesComponent\n\n\n","C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\context\\GameContextProvider.tsx",["55","56","57"],"import React, { ReactNode, useCallback, useEffect, useMemo, useState } from \"react\"\nimport GameContext from \"./GameContext\"\nimport { Player } from \"../types/Player\";\nimport { Board } from \"../types/Board\";\nimport { Space } from \"../types/Space\";\nimport { Game } from \"../types/Game\";\nimport GameApi from \"../api/GameApi\";\n\n\nimport {User} from \"../types/User\";\n\n\n\n\n\n\ntype GameContextProviderPropsType = {\n    children: ReactNode\n}\n\n\nconst GameContextProvider = ({ children }: GameContextProviderPropsType) => {\n    const [games, setGames] = useState<Game[]>([])\n\n    const [loaded, setLoaded] = useState<boolean>(false)\n\n\n\n    //The code below is executed when the provider is rendered (inside App.tsx)\n    //The code should fetch the data from the API instead of using a static assignment\n    //Define a useState variable, note that useState returns an array, containing that state itself aswell as\n    // a function to set a new state value, here we use array destructuring (the [..., ...] notation).\n    // we also declare that the state variable and setter should be of type /take type Player[]\n    const [players, setPlayers] = useState<Player[]>([])\n\n    const playerCount = useMemo(() => players.length, [players])\n\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0)\n    const [currentPlayer, setCurrentPlayer] = useState<Player>({ playerId: -1, playerColor: \"red\", boardId: -1, playerName: \"\" })\n    const [spaces, setSpaces] = useState<Space[][]>([])\n    const [width, setWidth] = useState<number>(0)\n    const [height, setHeight] = useState<number>(0)\n    const [gameId, setGameId] = useState<number>(0)\n    const [gameName, setGameName] = useState<string>(\"hi\")\n\n    //Define a function used to set a player ona  specific space\n    const setPlayerOnSpace = useCallback(async (space: Space) => {\n        // Check if game is started\n        let game = games.find(game => game.gameId === board.boardId);\n        if (game?.gameStarted) {\n            //Check if space already has a player standing on it\n            if (!space.playerId) {\n                await GameApi.moveCurrentPlayer(gameId, { ...space, playerId: currentPlayer.playerId }).then(() => {\n                    let tempSpaces = [...spaces] //Use spread operator to copy spaces array, needed for making immutable changes\n                    //See https://bit.ly/2My8Bfz, until the section about Immutable.js\n                    tempSpaces[space.x][space.y].playerId = currentPlayer.playerId //Set the player on the new space they clicked on\n\n                    if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) { //If the player was standing on a space previously, remove them from that space\n\n                        tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined\n                    }\n                    setSpaces(tempSpaces)\n                    let tempPlayers = [...players]\n                    tempPlayers[currentPlayerIndex].x = space.x; //Update the players array to reflect the changes\n                    tempPlayers[currentPlayerIndex].y = space.y; //Update the players array to reflect the changes\n                    setPlayers(tempPlayers)\n                    setCurrentPlayer({ ...currentPlayer, x: space.x, y: space.y }) //Update current player\n\n                }).catch(() => {\n                    console.error(\"Error while moving player\")\n                })\n\n            }\n        } else {\n\n        }\n\n\n\n    }, [currentPlayer, currentPlayerIndex, gameId, players, spaces])\n\n    const setCurrentPlayerInBackend = useCallback(async (boardId: number, playerId: number) => {\n        await GameApi.setCurrentPlayer(boardId, playerId)\n        console.log(\"Current player set.\")\n    },[])\n\n    const switchToNextPlayer = useCallback(async () => {\n        await GameApi.switchPlayer(gameId).then(() => {\n            const newPlayerIndex = (currentPlayerIndex + 1) % playerCount\n            console.log(\"old player index\", currentPlayerIndex, \"new player index\", newPlayerIndex)\n            setCurrentPlayer(players[newPlayerIndex])\n            setCurrentPlayerIndex(newPlayerIndex)\n        }).catch(() => console.error(\"Error while switching player\"))\n\n    }, [currentPlayerIndex, gameId, playerCount, players])\n\n    const board = useMemo<Board>(() => {\n        return ({\n            spaceDtos: spaces,\n            playerDtos: players,\n            currentPlayerDto: currentPlayer,\n            currentPlayerIndex: currentPlayerIndex,\n            width: width,\n            height: height,\n            boardName: gameName,\n            boardId: gameId\n        })\n    }, [currentPlayer, currentPlayerIndex, gameId, gameName, height, players, spaces, width])\n\n    const [userName, setUserName] = useState<string>(\"None\")\n    const [userId, setUserId] = useState<number>(-1)\n\n    const user = useMemo<User>(() =>{\n        return ({\n            playerId: userId,\n            playerName: userName\n        })\n    },[userId, userName])\n\n    const validateUser = useCallback(async (incName: string) => {\n        GameApi.validateUser(incName).then(userDTO => {\n            if(userDTO.playerId != null) {\n                setUserName(incName)\n                setUserId(userDTO.playerId)\n            }\n        }).catch(() => {\n            console.error(\"Error while fetching user\")\n        })},[])\n\n    const changeUserID = useCallback(async (incID: number) => {\n                setUserId(incID)\n        },[])\n\n    // Copied from \"Live-møde_Uge 12_-20210503_131255-Meeting Recording.mp4\"\n    const selectGame = useCallback(async (game: Game) => {\n        GameApi.getBoard(game.gameId).then(board => {\n            setSpaces(board.spaceDtos)\n            setPlayers(board.playerDtos)\n            setWidth(board.width)\n            setHeight(board.height)\n            setGameId(board.boardId)\n            setGameName(board.boardName)\n            if (board.currentPlayerDto) {\n                setCurrentPlayer(board.currentPlayerDto)\n                board.playerDtos.forEach((player, index) => {\n                    if (player.playerId === board.currentPlayerDto?.playerId) {\n                        setCurrentPlayerIndex(index)\n                    }\n                })\n\n            }\n\n            setLoaded(true)\n        }).catch(() => {\n            console.error(\"Error while fetching board from backend\")\n        })\n\n    }, [])\n\n    const unselectGame = useCallback(async () => {\n        setGameId(-1);\n        setLoaded(false);\n    }, [])\n\n    // Copied from \"Live-møde_Uge 13_-20210510_130431-Meeting Recording.mp4\"\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            if (loaded && gameId >= 0) {\n                GameApi.getBoard(gameId).then(board => {\n                    if (gameId === board.boardId) {\n                        setSpaces(board.spaceDtos)\n                        setPlayers(board.playerDtos)\n                        setWidth(board.width)\n                        setHeight(board.height)\n                        setGameId(board.boardId)\n                        setGameName(board.boardName)\n                        if (board.currentPlayerDto) {\n                            setCurrentPlayer(board.currentPlayerDto)\n                            board.playerDtos.forEach((player, index) => {\n                                if (player.playerId === board.currentPlayerDto?.playerId) {\n                                    setCurrentPlayerIndex(index)\n                                }\n                            })\n                        }\n                    }\n                }).catch(() => {\n                    console.error(\"Board could not be loaded\")\n                })\n            } else {\n                GameApi.getGames().then(games => {\n                    setGames(games)\n                }).catch(() => {\n                    console.error(\"Games could not be loaded\")\n                })\n\n            }\n\n        }, 1000)\n\n        return () => clearInterval(interval)\n    }, [loaded, gameId])\n\n\n\n    const deleteGame = useCallback(async (game: Game) => {\n        GameApi.deleteGame(game.gameId).then(() => {\n            console.log(\"Deleting game: \" + game.gameId)\n\n        }).catch(() => {\n            console.error(\"Error while deleting board from backend\")\n\n        })\n\n    }, [])\n\n\n    const startGame = useCallback(async (game: Game) => {\n            if (!game.gameStarted) {\n                GameApi.startGame(game.gameId).then(() => {\n                    game.gameStarted = true;\n                    console.log(\"Starting game: \" + game.gameId)\n\n                }).catch(() => {\n                    console.error(\"Error while starting game from backend\")\n\n                    throw 'Error in backend'\n                })\n            } else {\n                console.log(\"Game already started: \" + game.gameId + \" id\")\n\n\n            }\n\n    }, [])\n\n    const endGame = useCallback(async (game: Game) => {\n        if (game.gameStarted) {\n            GameApi.endGame(game.gameId).then(() => {\n                game.gameStarted = false;\n                console.log(\"Ending game: \" + game.gameId);\n\n            }).catch(() => {\n                console.error(\"Error while ending game from backend\")\n\n            })\n        } else {\n            console.log(\"Game already stopped: \" + game.gameId + \" id\")\n\n        }\n    }, [])\n\n\n\n    const createGame = useCallback(async (gameName: String) => {\n        GameApi.createGame(gameName).then(() => {\n\n        }).catch(() => {\n            console.error(\"Error while creating game from backend\")\n\n        })\n    }, [])\n\n\n    const createPlayer = useCallback(async (game: Game) => {\n            if (board.playerDtos.length < 6) {\n                GameApi.createPlayer(game.gameId).then(() =>\n                    console.log(\"Player created\")\n                )\n            } else {\n\n            }\n\n    }, [])\n\n    const addUserToBackEnd = useCallback(async (gameId: number, usName: string) => {\n        GameApi.addUserToGame(gameId, usName).then(() =>\n            console.log(\"added user to game\")\n        )\n    }, [])\n\n\n    return (\n        <GameContext.Provider\n            value={\n                {\n                    games: games,\n                    selectGame: selectGame,\n                    unselectGame: unselectGame,\n                    deleteGame: deleteGame,\n                    startGame: startGame,\n                    createGame: createGame,\n                    endGame: endGame,\n                    createPlayer: createPlayer,\n                    loaded: loaded,\n                    board: board,\n                    setCurrentPlayerOnSpace: setPlayerOnSpace,\n                    switchCurrentPlayer: switchToNextPlayer,\n                    user: user,\n                    validateUser: validateUser,\n                    changeUserID: changeUserID,\n                    setCurrentPlayerInBackend: setCurrentPlayerInBackend,\n                    addUserToBackEnd: addUserToBackEnd\n                }\n            }>\n            {children} {/*See: https://reactjs.org/docs/composition-vs-inheritance.html*/}\n        </GameContext.Provider>\n    )\n}\n\nexport default GameContextProvider","C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\context\\GameContext.ts",[],"C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\api\\GameApi.ts",[],"C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\components\\SpaceComponent.tsx",["58","59"],"import { FunctionComponent, useCallback, useContext, useMemo } from \"react\";\nimport { Space } from \"../types/Space\";\nimport GameContext from \"../context/GameContext\";\nimport styles from \"../styling/SpaceComponent.module.scss\"\n\nexport type SpaceComponentProps = {\n    space: Space\n}\n/*\n Note that we are explicitly specifying that SpaceComponent is of the type FunctionComponent,\n and that the props are of type SpaceComponentProps, also note that we use object destructuring to \"unpack\" the props.\n */\n\nexport const SpaceComponent: FunctionComponent<SpaceComponentProps> = ({ space }) => {\n\n    const { board, setCurrentPlayerOnSpace, switchCurrentPlayer,setCurrentPlayerInBackend, user } = useContext(GameContext)\n    //Below we essentially define a new variable using the useMemo hook, which can only take the value \"white\" or \"black\"\n    //Additionally the code inside the hook (the calculation of whether it is black or white) is only executed\n    // when the space prop updates (this is known as the dependencies of the hook)\n    const color = useMemo<\"white\" | \"black\">(() => {\n        if ((space.x + space.y) % 2 === 0) {\n            return \"white\"\n        } else {\n            return \"black\"\n        }\n    }, [space])\n    //We define a function using the useCallback hook, it returns a memoized callback/function that is only\n    // updated when the dependencies update.\n    const onClickField = useCallback(async () => {\n        await setCurrentPlayerInBackend(board.boardId, user.playerId)\n        if (!space.playerId) { // A shorthand, check equivalents at https://bit.ly/2MnA4Rk\n            await setCurrentPlayerOnSpace(space)\n        }\n\n    }, [setCurrentPlayerOnSpace, space, setCurrentPlayerInBackend])\n    const playerColor = useMemo(() => {\n        const res = board.playerDtos.find(value => value.playerId === space.playerId)\n        if (res) return res.playerColor\n    }, [board.playerDtos, space.playerId])\n    return (\n        //The classname is set dynamically and can either take the value styles.whiteSpace or styles.blackSpace\n        //We also define that the callback should be called when the div is clicked\n        <div className={styles[color + \"Space\"]} onClick={onClickField}>\n            {/*if space.player is set render the div*/}\n            {(space.playerId && playerColor) && <div className={styles[playerColor + \"Player\"]} />}\n        </div>\n    )\n\n\n}\n\n\n","C:\\Users\\Shroom\\IdeaProjects\\RoborallyFrontend\\roborally_frontend\\src\\components\\GameComponent.tsx",["60","61","62"],{"ruleId":"63","severity":1,"message":"64","line":1,"column":16,"nodeType":"65","messageId":"66","endLine":1,"endColumn":23},{"ruleId":"63","severity":1,"message":"67","line":1,"column":25,"nodeType":"65","messageId":"66","endLine":1,"endColumn":33},{"ruleId":"63","severity":1,"message":"68","line":5,"column":10,"nodeType":"65","messageId":"66","endLine":5,"endColumn":23},{"ruleId":"63","severity":1,"message":"69","line":5,"column":22,"nodeType":"65","messageId":"66","endLine":5,"endColumn":28},{"ruleId":"63","severity":1,"message":"70","line":12,"column":8,"nodeType":"65","messageId":"66","endLine":12,"endColumn":22},{"ruleId":"63","severity":1,"message":"71","line":13,"column":8,"nodeType":"65","messageId":"66","endLine":13,"endColumn":14},{"ruleId":"63","severity":1,"message":"72","line":14,"column":8,"nodeType":"65","messageId":"66","endLine":14,"endColumn":18},{"ruleId":"63","severity":1,"message":"64","line":1,"column":47,"nodeType":"65","messageId":"66","endLine":1,"endColumn":54},{"ruleId":"73","severity":1,"message":"74","line":80,"column":8,"nodeType":"75","endLine":80,"endColumn":68,"suggestions":"76"},{"ruleId":"77","severity":1,"message":"78","line":226,"column":21,"nodeType":"79","messageId":"80","endLine":226,"endColumn":45},{"ruleId":"73","severity":1,"message":"81","line":273,"column":8,"nodeType":"75","endLine":273,"endColumn":10,"suggestions":"82"},{"ruleId":"63","severity":1,"message":"83","line":16,"column":45,"nodeType":"65","messageId":"66","endLine":16,"endColumn":64},{"ruleId":"73","severity":1,"message":"84","line":35,"column":8,"nodeType":"75","endLine":35,"endColumn":67,"suggestions":"85"},{"ruleId":"63","severity":1,"message":"70","line":11,"column":8,"nodeType":"65","messageId":"66","endLine":11,"endColumn":22},{"ruleId":"63","severity":1,"message":"72","line":12,"column":8,"nodeType":"65","messageId":"66","endLine":12,"endColumn":18},{"ruleId":"63","severity":1,"message":"71","line":13,"column":8,"nodeType":"65","messageId":"66","endLine":13,"endColumn":14},"@typescript-eslint/no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'ToastProvider' is defined but never used.","'Button' is defined but never used.","'ListItemAvatar' is defined but never used.","'Avatar' is defined but never used.","'PlayerIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'board.boardId' and 'games'. Either include them or remove the dependency array.","ArrayExpression",["86"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","React Hook useCallback has a missing dependency: 'board.playerDtos.length'. Either include it or remove the dependency array.",["87"],"'switchCurrentPlayer' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'board.boardId' and 'user.playerId'. Either include them or remove the dependency array.",["88"],{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},"Update the dependencies array to be: [board.boardId, currentPlayer, currentPlayerIndex, gameId, games, players, spaces]",{"range":"95","text":"96"},"Update the dependencies array to be: [board.playerDtos.length]",{"range":"97","text":"98"},"Update the dependencies array to be: [setCurrentPlayerInBackend, board.boardId, user.playerId, space, setCurrentPlayerOnSpace]",{"range":"99","text":"100"},[3462,3522],"[board.boardId, currentPlayer, currentPlayerIndex, gameId, games, players, spaces]",[9822,9824],"[board.playerDtos.length]",[1658,1717],"[setCurrentPlayerInBackend, board.boardId, user.playerId, space, setCurrentPlayerOnSpace]"]